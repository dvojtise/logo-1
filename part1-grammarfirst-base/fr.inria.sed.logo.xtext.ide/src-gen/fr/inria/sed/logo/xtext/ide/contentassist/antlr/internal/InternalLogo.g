/*
 * generated by Xtext 2.14.0
 */
grammar InternalLogo;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.inria.sed.logo.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.inria.sed.logo.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.inria.sed.logo.xtext.services.LogoGrammarAccess;

}
@parser::members {
	private LogoGrammarAccess grammarAccess;

	public void setGrammarAccess(LogoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleLogoProgram
entryRuleLogoProgram
:
{ before(grammarAccess.getLogoProgramRule()); }
	 ruleLogoProgram
{ after(grammarAccess.getLogoProgramRule()); } 
	 EOF 
;

// Rule LogoProgram
ruleLogoProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogoProgramAccess().getGroup()); }
		(rule__LogoProgram__Group__0)
		{ after(grammarAccess.getLogoProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
		(rule__Instruction__Alternatives)
		{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcDeclaration
entryRuleProcDeclaration
:
{ before(grammarAccess.getProcDeclarationRule()); }
	 ruleProcDeclaration
{ after(grammarAccess.getProcDeclarationRule()); } 
	 EOF 
;

// Rule ProcDeclaration
ruleProcDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcDeclarationAccess().getGroup()); }
		(rule__ProcDeclaration__Group__0)
		{ after(grammarAccess.getProcDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcCall
entryRuleProcCall
:
{ before(grammarAccess.getProcCallRule()); }
	 ruleProcCall
{ after(grammarAccess.getProcCallRule()); } 
	 EOF 
;

// Rule ProcCall
ruleProcCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcCallAccess().getGroup()); }
		(rule__ProcCall__Group__0)
		{ after(grammarAccess.getProcCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForward
entryRuleForward
:
{ before(grammarAccess.getForwardRule()); }
	 ruleForward
{ after(grammarAccess.getForwardRule()); } 
	 EOF 
;

// Rule Forward
ruleForward 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForwardAccess().getGroup()); }
		(rule__Forward__Group__0)
		{ after(grammarAccess.getForwardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeft
entryRuleLeft
:
{ before(grammarAccess.getLeftRule()); }
	 ruleLeft
{ after(grammarAccess.getLeftRule()); } 
	 EOF 
;

// Rule Left
ruleLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftAccess().getGroup()); }
		(rule__Left__Group__0)
		{ after(grammarAccess.getLeftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRight
entryRuleRight
:
{ before(grammarAccess.getRightRule()); }
	 ruleRight
{ after(grammarAccess.getRightRule()); } 
	 EOF 
;

// Rule Right
ruleRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightAccess().getGroup()); }
		(rule__Right__Group__0)
		{ after(grammarAccess.getRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getForwardParserRuleCall_0()); }
		ruleForward
		{ after(grammarAccess.getInstructionAccess().getForwardParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getLeftParserRuleCall_1()); }
		ruleLeft
		{ after(grammarAccess.getInstructionAccess().getLeftParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getRightParserRuleCall_2()); }
		ruleRight
		{ after(grammarAccess.getInstructionAccess().getRightParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getProcDeclarationParserRuleCall_3()); }
		ruleProcDeclaration
		{ after(grammarAccess.getInstructionAccess().getProcDeclarationParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getProcCallParserRuleCall_4()); }
		ruleProcCall
		{ after(grammarAccess.getInstructionAccess().getProcCallParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogoProgram__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogoProgram__Group__0__Impl
	rule__LogoProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogoProgram__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogoProgramAccess().getLogoProgramAction_0()); }
	()
	{ after(grammarAccess.getLogoProgramAccess().getLogoProgramAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogoProgram__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogoProgram__Group__1__Impl
	rule__LogoProgram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogoProgram__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogoProgramAccess().getInstructionsAssignment_1()); }
	(rule__LogoProgram__InstructionsAssignment_1)
	{ after(grammarAccess.getLogoProgramAccess().getInstructionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogoProgram__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogoProgram__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogoProgram__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogoProgramAccess().getInstructionsAssignment_2()); }
	(rule__LogoProgram__InstructionsAssignment_2)*
	{ after(grammarAccess.getLogoProgramAccess().getInstructionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcDeclaration__Group__0__Impl
	rule__ProcDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcDeclarationAccess().getProcDeclarationAction_0()); }
	()
	{ after(grammarAccess.getProcDeclarationAccess().getProcDeclarationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcDeclaration__Group__1__Impl
	rule__ProcDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcDeclarationAccess().getToKeyword_1()); }
	'to'
	{ after(grammarAccess.getProcDeclarationAccess().getToKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcDeclaration__Group__2__Impl
	rule__ProcDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcDeclarationAccess().getNameAssignment_2()); }
	(rule__ProcDeclaration__NameAssignment_2)
	{ after(grammarAccess.getProcDeclarationAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcDeclaration__Group__3__Impl
	rule__ProcDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcDeclarationAccess().getArgsAssignment_3()); }
	(rule__ProcDeclaration__ArgsAssignment_3)*
	{ after(grammarAccess.getProcDeclarationAccess().getArgsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcDeclaration__Group__4__Impl
	rule__ProcDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcDeclarationAccess().getInstructionsAssignment_4()); }
	(rule__ProcDeclaration__InstructionsAssignment_4)
	{ after(grammarAccess.getProcDeclarationAccess().getInstructionsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcDeclaration__Group__5__Impl
	rule__ProcDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcDeclarationAccess().getInstructionsAssignment_5()); }
	(rule__ProcDeclaration__InstructionsAssignment_5)*
	{ after(grammarAccess.getProcDeclarationAccess().getInstructionsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcDeclarationAccess().getEndKeyword_6()); }
	'end'
	{ after(grammarAccess.getProcDeclarationAccess().getEndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getParameterAction_0()); }
	()
	{ after(grammarAccess.getParameterAccess().getParameterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getParameterAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_2()); }
	(rule__Parameter__NameAssignment_2)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group__0__Impl
	rule__ProcCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getDeclarationAssignment_0()); }
	(rule__ProcCall__DeclarationAssignment_0)
	{ after(grammarAccess.getProcCallAccess().getDeclarationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group__1__Impl
	rule__ProcCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getProcCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group__2__Impl
	rule__ProcCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getActualArgsAssignment_2()); }
	(rule__ProcCall__ActualArgsAssignment_2)?
	{ after(grammarAccess.getProcCallAccess().getActualArgsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group__3__Impl
	rule__ProcCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getGroup_3()); }
	(rule__ProcCall__Group_3__0)*
	{ after(grammarAccess.getProcCallAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getProcCallAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcCall__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group_3__0__Impl
	rule__ProcCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getProcCallAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getActualArgsAssignment_3_1()); }
	(rule__ProcCall__ActualArgsAssignment_3_1)
	{ after(grammarAccess.getProcCallAccess().getActualArgsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Forward__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__0__Impl
	rule__Forward__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getForwardKeyword_0()); }
	'forward'
	{ after(grammarAccess.getForwardAccess().getForwardKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getStepsAssignment_1()); }
	(rule__Forward__StepsAssignment_1)
	{ after(grammarAccess.getForwardAccess().getStepsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Left__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__0__Impl
	rule__Left__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getLeftAction_0()); }
	()
	{ after(grammarAccess.getLeftAccess().getLeftAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__1__Impl
	rule__Left__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getLeftKeyword_1()); }
	'left'
	{ after(grammarAccess.getLeftAccess().getLeftKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getAngleAssignment_2()); }
	(rule__Left__AngleAssignment_2)
	{ after(grammarAccess.getLeftAccess().getAngleAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__0__Impl
	rule__Right__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightAction_0()); }
	()
	{ after(grammarAccess.getRightAccess().getRightAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__1__Impl
	rule__Right__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightKeyword_1()); }
	'right'
	{ after(grammarAccess.getRightAccess().getRightKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getAngleAssignment_2()); }
	(rule__Right__AngleAssignment_2)
	{ after(grammarAccess.getRightAccess().getAngleAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogoProgram__InstructionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogoProgramAccess().getInstructionsInstructionParserRuleCall_1_0()); }
		ruleInstruction
		{ after(grammarAccess.getLogoProgramAccess().getInstructionsInstructionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogoProgram__InstructionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogoProgramAccess().getInstructionsInstructionParserRuleCall_2_0()); }
		ruleInstruction
		{ after(grammarAccess.getLogoProgramAccess().getInstructionsInstructionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcDeclarationAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getProcDeclarationAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__ArgsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcDeclarationAccess().getArgsParameterParserRuleCall_3_0()); }
		ruleParameter
		{ after(grammarAccess.getProcDeclarationAccess().getArgsParameterParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__InstructionsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcDeclarationAccess().getInstructionsInstructionParserRuleCall_4_0()); }
		ruleInstruction
		{ after(grammarAccess.getProcDeclarationAccess().getInstructionsInstructionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDeclaration__InstructionsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcDeclarationAccess().getInstructionsInstructionParserRuleCall_5_0()); }
		ruleInstruction
		{ after(grammarAccess.getProcDeclarationAccess().getInstructionsInstructionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__DeclarationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcCallAccess().getDeclarationProcDeclarationCrossReference_0_0()); }
		(
			{ before(grammarAccess.getProcCallAccess().getDeclarationProcDeclarationEStringParserRuleCall_0_0_1()); }
			ruleEString
			{ after(grammarAccess.getProcCallAccess().getDeclarationProcDeclarationEStringParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getProcCallAccess().getDeclarationProcDeclarationCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__ActualArgsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcCallAccess().getActualArgsEIntParserRuleCall_2_0()); }
		ruleEInt
		{ after(grammarAccess.getProcCallAccess().getActualArgsEIntParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__ActualArgsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcCallAccess().getActualArgsEIntParserRuleCall_3_1_0()); }
		ruleEInt
		{ after(grammarAccess.getProcCallAccess().getActualArgsEIntParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__StepsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForwardAccess().getStepsEIntParserRuleCall_1_0()); }
		ruleEInt
		{ after(grammarAccess.getForwardAccess().getStepsEIntParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__AngleAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftAccess().getAngleEIntParserRuleCall_2_0()); }
		ruleEInt
		{ after(grammarAccess.getLeftAccess().getAngleEIntParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__AngleAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightAccess().getAngleEIntParserRuleCall_2_0()); }
		ruleEInt
		{ after(grammarAccess.getRightAccess().getAngleEIntParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
