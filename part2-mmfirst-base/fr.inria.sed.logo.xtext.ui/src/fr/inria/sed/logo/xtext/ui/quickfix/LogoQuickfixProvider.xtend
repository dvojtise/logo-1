/*
 * generated by Xtext 2.14.0
 */
package fr.inria.sed.logo.xtext.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import fr.inria.sed.logo.xtext.validation.LogoValidator
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.diagnostics.Diagnostic

import static extension org.eclipse.xtext.EcoreUtil2.*
import fr.inria.sed.logo.LogoFactory
import fr.inria.sed.logo.ProcDeclaration
import fr.inria.sed.logo.LogoProgram

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class LogoQuickfixProvider extends DefaultQuickfixProvider {

//	@Fix(LogoValidator.INVALID_ARGS_NUMBER)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}

	@Fix(Diagnostic.LINKING_DIAGNOSTIC)
	def void fixMissingProcDecl(Issue issue,
								IssueResolutionAcceptor acceptor) {
		if (issue.message.contains("ProcDeclaration")) {
			createMissingProcDecl(issue, acceptor);
		}
	}
	
	private def createMissingProcDecl(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue,
			"Create missing procedure declaration",
			"Create missing procedure declaration",
			null, // no icon 
			[ element, context |
				val root = element.getContainerOfType(typeof(LogoProgram))				
				root.instructions.add(
					0,
					LogoFactory::eINSTANCE.createProcDeclaration() => [
						name = context.xtextDocument.get(issue.offset,
						issue.length)
					]
				)
			]
		);
	}
}
